% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Printing.R
\name{make_output_rows}
\alias{make_output_rows}
\alias{vec_print}
\title{Prepare the Rows of the Output}
\usage{
make_output_rows(vec, numCols, maxChars)

vec_print(
  vec,
  indent = 0,
  maxLen = 20,
  maxWidth = getOption("width") - indent,
  order = "none",
  printOut = TRUE,
  color = "#00FF00"
)
}
\arguments{
\item{vec}{The (atomic) vector to print out.}

\item{numCols}{The number of columns to use in the output (integer scalar).}

\item{maxChars}{The maximum number of characters to print for each element of \code{vec} (integer scalar).}

\item{indent}{Number of spaces to indent the output by (integer scalar),
or a string to use as the indent (character scalar).}

\item{maxLen}{The maximum length of a string to print out (integer scalar).}

\item{maxWidth}{The mxximum width to print out per row (defaults to fill available space) (integer scalar).}

\item{order}{How to order the \code{vec} before printing (see details for more) (character scalar).}

\item{printOut}{Whether to print out the formatted output (logical scalar).}

\item{color}{The color of the output, which can be any valid input to \code{crayon::make_style}
(e.g. 6/8 digit hex codes, RGB (as a 3 row, 1 column matrix), or an element from \code{colors()}).}
}
\value{
The output rows vector.

The final output row vector.
}
\description{
Used as a helper function in \code{vec_print} to make output row strings.

Prints out a vector columnwise, using the full width available.
This is usually called for its side effects, but will also return the (unformatted) output rows vector.
}
\details{
\code{order} can be one of three values: c("none" (default), "sort", "short"/"shortest")
\code{order = "none"} will print out the vector in the same order it was supplied.
\code{order = "sort"} will sort the vector before printing (using \code{sort}).
\code{order = "short"/"shortest"} will sort the vector according to length,
  which will ensure that the printing takes up as little space as possible.
}
\examples{

set.seed(112)
fruits <- sample(c("apple", "banana", "cherry", "orange", "pineapple",
                   "really very long fruit name"), 100, replace = TRUE)
vec_print(fruits)
vec_print(fruits, maxLen = 20)
vec_print(fruits, maxWidth = 50)
vec_print(fruits, order = "sort")
vec_print(fruits, order = "shortest")
vp <- vec_print(fruits, printOut = FALSE)
vp

\dontrun{
  
  vec_print(lexicon::sw_fry_25)
  vec_print(rep(lexicon::sw_fry_25, 2))
  vec_print(lexicon::sw_fry_100)
  vec_print(lexicon::sw_fry_200)
  vec_print(lexicon::sw_fry_1000)
  
  vec_print(lexicon::sw_fry_200, maxLen = 5)
  vec_print(lexicon::sw_fry_200, maxLen = 20)
  vec_print(lexicon::sw_fry_200, maxWidth = 50)
  vec_print(lexicon::sw_fry_1000, order = "sort")
  vec_print(lexicon::sw_fry_1000, order = "shortest")
  
  vp <- vec_print(lexicon::sw_fry_1000, order = "shortest", printOut = FALSE)
  vp
  
}

}
