% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Data_Dictionary.R
\name{dataDict}
\alias{dataDict}
\title{Create a Data Dictionary}
\usage{
dataDict(df, table = "lazy", verbose = Inf)
}
\arguments{
\item{df}{The data.frame-like object to calculate information for (should be a name, not an expression).}

\item{table}{What mode to use for tabulating each column (see \code{details} for more) (character/logical scalar).}

\item{verbose}{How verbose you want the function to be (higher prints more information) (integer scalar).}
}
\value{
A \code{dataDict} object.
}
\description{
Create a data dictionary object which holds information on the columns of a data.frame-like object.
}
\details{
The \code{df} parameter should be the name of a data.frame-like object, as opposed to an expression.
E.g. call the function as \code{dataDict(mtcars)}, instead of \code{dataDict(as_tibble(mtcars))}.
This will allow for more functionality, and will help avoid errors, especially when lazy table mode is active.
If you want to pass an expression, simple ones should work, but do so at your own risk.

The \code{table} parameter can have one of three values: c(TRUE, FALSE, "lazy").
Lazy table mode means that columns are not tabulated until requested.
When they are tabulated, they can be done one at a time (\code{table = "lazy"}),
  or all together (\code{table = true}).
This setting can be deactivated entirely (\code{table = FALSE}), but this is not suggesteds.
This setting is useful since tabulation can take a long time for large datasets.

If \code{verbose > 0} (or \code{verbose != FALSE}), a message will be printed out when lazy table mode is active,
  as well as when \code{df} is passed as an expression.
If \code{verbose > 1}, a message will be printed out saying what object the \code{dataDict} is based on.
}
\examples{
dd1 <- dataDict(mtcars)
dd2 <- dataDict(mtcars, table = "lazy")
dd3 <- dataDict(mtcars, table = TRUE)
dd5 <- dataDict(mtcars, table = FALSE)
dd4 <- dataDict(mtcars, table = "lazy", verbose = 0)
dd4 <- dataDict(mtcars, table = TRUE, verbose = 0)
dd4 <- dataDict(mtcars, table = FALSE, verbose = 0)

# The line below works, since the expression is rather simple, but should be avoided
# It is better to declare use something like `df <- tibble(mtcars); dd <- dataDict(df)`
dd <- dataDict(tibble(mtcars))

}
